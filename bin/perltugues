#!/usr/bin/perl
use lib 'lib';

use perltugues::Converter;

my %par = (
   "so-traduzir"    => 0,
   "debug-input"    => 0,
   "debug-parser"   => 0,
   "debug-preparer" => 0,
   "e"              => 0,
);
my @new_argv;

while (my $index = shift @ARGV) {
   if(substr($index, 0, 1) eq "-") {
      my $val = $index;
      my $long = 0;
      $long = 1 if(substr($index, 0, 2) eq "--");
      $val =~ s/^-+//;

      my($name, $value);
      if($long) {
         ($name, $value) = split /=/, $val;
      } else {
         ($name, $value) = $val =~ /^(\w)(.*)$/gsm;
      }

      if(defined $value) {
         $par{$name} = $value
      } else {
         $par{$name}++;
      }
      die "Parametro '$name' n√£o reconhecido" unless exists $par{$name};
      last if $name eq 'e';
   } else {
      unshift @ARGV, $index;
      last;
   }
}

my $code;
if($par{e}) {
   $code = $par{e};
} else {
   while(<>) {
      $code .= $_;
   }
}

my $converter = perltugues::Converter->new;

$converter->debug_input    if $par{"debug-input"};
$converter->debug_parser   if $par{"debug-parser"};
$converter->debug_preparer if $par{"debug-preparer"};

my $perl_code = $converter->convert($code);
if($par{"so-traduzir"}) {
   Perl::Tidy::perltidy(source => \$perl_code, destination => \$perl_code)
      if eval "require Perl::Tidy";
   print $perl_code, $/
} else {
   eval $perl_code;
}
